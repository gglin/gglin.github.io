<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Genetically Modified Origin]]></title>
  <link href="http://gglin.github.io/atom.xml" rel="self"/>
  <link href="http://gglin.github.io/"/>
  <updated>2013-08-08T16:51:32-04:00</updated>
  <id>http://gglin.github.io/</id>
  <author>
    <name><![CDATA[George L]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exploring Ruby's Core (Methods, Modules, Classes, and more, oh my!) through Metaprogramming & Monkeypatching]]></title>
    <link href="http://gglin.github.io/blog/2013/07/17/monkeypatching-ruby-core/"/>
    <updated>2013-07-17T17:04:00-04:00</updated>
    <id>http://gglin.github.io/blog/2013/07/17/monkeypatching-ruby-core</id>
    <content type="html"><![CDATA[<p><em>A general disclaimer:
I just learned Ruby ~3 months ago, so please let me know if any of this can be improved upon</em></p>

<p>As I&rsquo;ve been learning and becoming familiar with Ruby and its various libraries / gems, one thing I&rsquo;ve found myself doing often is opening up <code>irb</code> or <code>pry</code> and playing around all different kinds of methods, classes, and modules.  However, I&rsquo;ve found that it&rsquo;s hard to explore this consistently without having to constantly refer back to the documentation for what methods exist for each class / module or what the structure of the classes or modules are.  I just want to play around and avoid constantly going back online or to the source code! The solution: I ended up modifying the core <code>~/.irbrc</code> and <code>~/.pryrc</code> files to monkeypatch Ruby&rsquo;s core classes, so that everytime I start up <code>irb</code>, <code>pry</code>, or <code>rails console</code> I get access to my custom methods.  Here&rsquo;s a link to what my .pryrc file looks like:</p>

<p><a href="https://gist.github.com/gglin/5930277">https://gist.github.com/gglin/5930277</a></p>

<p><em>If you want to see an example of all this in action, go to <a href="#usage">the end of this post</a></em></p>

<p>Now, I can much more easily explore methods, classes, modules and other Ruby constructs:</p>

<h3>Exploring Methods</h3>

<ul>
<li>any method which ends with the word <code>"methods"</code>, i.e. returns an array of the defined methods for an object, whether it is all methods, instance methods, private methods, or whatever else, can now be prefixed with <code>"local_"</code> to return a much shorter array of just methods which aren&rsquo;t already defined for all Ruby Objects (though you can modify this default to return the difference with any class).

<ul>
<li>Ruby does have a built-in way to retrieve only methods defined in the immediate scope, not any mixed-in modules or superclasses, by setting the argument in <code>xxx_methods(arg)</code> so that <code>arg = false</code>. However, having a <code>local_xxx_methods</code> is more customizable, and may be more telling in many cases, such as where you are totally unfamiliar with a class or module and want to see not just how it is different from its immediate ancestors, but overall, i.e. to see the methods it inherited from everything but the Object class.</li>
</ul>
</li>
</ul>


<p>See code here:</p>

<figure class='code'><figcaption><span>.irbrc or .pryrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Object</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#   all methods named &#39;local_(*)_methods&#39; </span>
</span><span class='line'>  <span class="c1">#   should return &#39;(*)_methods&#39; minus those that exist in Object</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">klass</span> <span class="o">=</span> <span class="no">Object</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;local_&quot;</span> <span class="o">&amp;&amp;</span> <span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span><span class="o">[-</span><span class="mi">7</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;methods&quot;</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span><span class="o">[</span><span class="mi">6</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;local&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">subname</span> <span class="o">=</span> <span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span><span class="o">[</span><span class="mi">6</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">to_sym</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">subname</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="o">-</span> <span class="n">klass</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">subname</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<h3>Exploring Namespaces</h3>

<ul>
<li><p>When I call ancestors on a module, the list of results returned is a mix of the modules mixed in and the superclasses.  Breaking these into two methods, <code>module_ancestors</code> and <code>class_ancestors</code>, helps me to better understand the inheritance chain of a given module or class.  For example, it&rsquo;s much clearer now that the class inheritance chain for <code>Fixnum</code> is <code>[Fixnum, Integer, Numeric, Object, BasicObject]</code>, while the modules <code>[Comparable, Kernel]</code> are only mixed in.</p></li>
<li><p>For a given namespace, such as <code>ActiveRecord::Base</code>, I was curious to see what the various modules and classes that exist under that namespace are, as there is (1) no easy way to see all of these without consulting the source code, which is massive for something like ActiveRecord, and not trivial to find and explore, and (2) no easy way to tell the difference between modules, classes, and other constants under that namespace.</p>

<ul>
<li>I initially consulted a StackOverflow post that explains how to do this, and wrote up the methods <code>subclasses</code> and <code>submodules</code>.  Unfortunately, these only look for subclasses within subclasses and submodules within submodules&hellip;</li>
<li>There are many cases where in the nested namespaces, you could have a class in a module in a class in a module, or anything else.  Although more complicated, I eventually came up with a way to do this using a &ldquo;subthing&rdquo; helper method, which is a ~20 line monstrosity I&rsquo;m not happy with.  Regardless, the methods <code>subconstruct_classes</code> and <code>subconstruct_methods</code> will look into all nested namespaces, no matter how deep, and retrieve all classes or modules.</li>
</ul>
</li>
</ul>


<br>


<ul>
<li>Modifying the above code slightly allows for retrieval of non-module, non-class constants for a given module &ndash; for example, finding that the only constants that exist for the <code>Math</code> module are <code>:PI</code> &amp; <code>:E</code>, and that their values are 3.14159&hellip; &amp; 2.71828&hellip; using <code>subconstants</code> and <code>subconstant_names</code></li>
</ul>


<p>See code here:</p>

<figure class='code'><figcaption><span>.irbrc or .pryrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Module</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">class_methods</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">methods</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="o">-</span> <span class="nb">self</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">class_ancestors</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">ancestors</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="no">Class</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">module_ancestors</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">ancestors</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="no">Module</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">subthings</span><span class="p">(</span><span class="n">recursive</span> <span class="o">=</span> <span class="kp">false</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">const_name</span><span class="o">|</span> <span class="nb">const_get</span><span class="p">(</span><span class="n">const_name</span><span class="p">)}</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">const</span><span class="o">|</span> <span class="k">yield</span><span class="p">(</span><span class="n">const</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">[]</span> <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">recursive</span> <span class="o">==</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">result</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">looper</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">clone</span>
</span><span class='line'>      <span class="n">looper</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">thing</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">thing</span><span class="o">.</span><span class="n">subthings</span><span class="p">(</span><span class="kp">false</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">subthing</span><span class="o">|</span>
</span><span class='line'>          <span class="n">subthing</span><span class="o">.</span><span class="n">subthings</span><span class="p">(</span><span class="kp">false</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">subsubthing</span><span class="o">|</span>
</span><span class='line'>            <span class="n">recursive</span> <span class="o">=</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">subsubthing</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>          <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">thing</span><span class="o">.</span><span class="n">subthings</span><span class="p">(</span><span class="n">recursive</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">result</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># http://www.natontesting.com/2010/06/30/how-to-get-the-submodules-of-a-ruby-module/</span>
</span><span class='line'>  <span class="c1"># return only immediate nested namespace modules</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">submodules</span><span class="p">(</span><span class="n">recursive</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="n">subthings</span><span class="p">(</span><span class="n">recursive</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">const</span><span class="o">|</span> <span class="n">const</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="no">Module</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># return only immediate nested namespace classes</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">subclasses</span><span class="p">(</span><span class="n">recursive</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="n">subthings</span><span class="p">(</span><span class="n">recursive</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">const</span><span class="o">|</span> <span class="n">const</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="no">Class</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">subconstructs</span><span class="p">(</span><span class="n">recursive</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="n">subthings</span><span class="p">(</span><span class="n">recursive</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">const</span><span class="o">|</span> <span class="n">const</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="no">Class</span> <span class="o">||</span> <span class="n">const</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="no">Module</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># returns all nested namespace modules</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">subconstruct_modules</span>
</span><span class='line'>    <span class="n">subconstructs</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">const</span><span class="o">|</span> <span class="n">const</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="no">Module</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># returns all nested namespace classes</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">subconstruct_classes</span>
</span><span class='line'>    <span class="n">subconstructs</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">const</span><span class="o">|</span> <span class="n">const</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="no">Class</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># retrieves non-class, non-module constant names</span>
</span><span class='line'>  <span class="c1"># e.g. Math.subconstants =&gt; [3.14159, 2.71828]</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">subconstants</span><span class="p">(</span><span class="n">recursive</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="n">subthings</span><span class="p">(</span><span class="n">recursive</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">const</span><span class="o">|</span> <span class="n">const</span><span class="o">.</span><span class="n">class</span> <span class="o">!=</span> <span class="no">Class</span> <span class="o">&amp;&amp;</span> <span class="n">const</span><span class="o">.</span><span class="n">class</span> <span class="o">!=</span> <span class="no">Module</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># retrieves non-class, non-module constant names</span>
</span><span class='line'>  <span class="c1"># e.g. Math.subconstant_names =&gt; [:PI, :E]</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">subconstant_names</span>
</span><span class='line'>    <span class="nb">constants</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">const_name</span><span class="o">|</span> <span class="nb">const_get</span><span class="p">(</span><span class="n">const_name</span><span class="p">)</span><span class="o">.</span><span class="n">class</span> <span class="o">!=</span> <span class="no">Class</span> <span class="o">&amp;&amp;</span> <span class="nb">const_get</span><span class="p">(</span><span class="n">const_name</span><span class="p">)</span><span class="o">.</span><span class="n">class</span> <span class="o">!=</span> <span class="no">Module</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Exploring Class Inheritance</h3>

<ul>
<li>Finally, for classes, there is an easy built-in way to look up the inheritance chain and find the parent of a class using the <code>superclass</code> method.  Unfortunately the opposite isn&rsquo;t true &ndash; there&rsquo;s no built-in way to find all children of a parent class.  Fortunately Ruby has module called <code>ObjectSpace</code> which allows for traversal of all living objects in memory, allowing for a simple <code>child_classes</code> (&amp; alias <code>children</code>) method to be defined.  Note that this is <strong>NOT</strong> the same thing as the <code>subclasses</code> method I mentioned earlier &ndash; the latter only cares about namespaces, i.e. <code>BaseModule::AnotherModule::SubClass</code>, while <code>child_classes</code> is concerned with class inheritance, i.e. <code>ChildClass &lt; ParentClass</code>.</li>
</ul>


<p>See code here:</p>

<figure class='code'><figcaption><span>.irbrc or .pryrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Class</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">child_classes</span>
</span><span class='line'>    <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">Class</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">klass</span><span class="o">|</span> <span class="n">klass</span> <span class="o">&lt;</span> <span class="nb">self</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">children</span>
</span><span class='line'>    <span class="n">child_classes</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">siblings</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">child_classes</span> <span class="o">-</span> <span class="o">[</span><span class="nb">self</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Not finding giants to stand on the shoulders of, aka It&rsquo;s been done before</h3>

<p>Of course, it was only after I had written all of these that I found there&rsquo;s much more experienced coders who have done a lot of this already! Here are some (probably better) ways to accomplish what I monkeypatched:</p>

<ul>
<li><p>There is an entire gem which consists of libraries which extend the core capabilities of Ruby&rsquo;s built-in constructs: <a href="https://github.com/rubyworks/facets">Facets</a>.  A lot of the methods from Facets do the above, probably in a better way.  Updates to Facets have been infrequent in the last year, but nevertheless it seems to have tons of potentially useful additions to core Ruby.</p></li>
<li><p>There are in gems which make it much easier to print readable, colorful Ruby &ndash; for example, the &ldquo;y&rdquo; method in YAML, &ldquo;pp&rdquo; for prettyprint, &ldquo;pretty_generate&rdquo; in JSON.  Among these is a great little gem called <a href="https://github.com/michaeldv/awesome_print">Awesome Print</a>, which not only formats and colorizes the output, but also adds additional helpful info, such as the superclass of the printed object, the index of each element in an array, and vertically aligning the hash rocket in a hash so that the keys and values are easier to read.  To always include awesome print, I added this to my .pryrc as per instructions:</p></li>
</ul>


<figure class='code'><figcaption><span>.irbrc or .pryrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;awesome_print&quot;</span>
</span><span class='line'><span class="no">AwesomePrint</span><span class="o">.</span><span class="n">pry!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, this solves the problem of being able to tell the difference between class and module ancestors. For example, with ap enabled, <code>CodeRay::WordList::CaseIgnoring.ancestors</code> returns the following:</p>

<p><img src="http://i.imgur.com/ET92gHl.png"></p>

<p>This is clearly much easier to read and tells you not only which ancestors are classes, but what each ancestor&rsquo;s superclass is.</p>

<p>Regardless, by doing these monkeypatches, I&rsquo;ve found it much easier to navigate around all kinds of objects and methods in Ruby to learn more about it, without necessarily having to go back to the source code &ndash; for example, find a specific class within <code>ActiveRecord::Base</code> and then find all the local_methods for that class.  Even if there is still a lot of code I could change /  clean up, this was a great learning experience to understand Ruby more deeply. As they say, it&rsquo;s about the journey, not just the destination.</p>

<h3><span id="usage">Example of Usage</span></h3>

<p>As an example of how I can use the code I wrote, I started pry and typed in:</p>

<figure class='code'><figcaption><span>pry</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">CodeRay</span><span class="o">.</span><span class="n">subconstruct_modules</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:FileType</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Styles</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Encoders</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:PluginHost</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Plugin</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Scanners</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:GZip</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Tokens</span><span class="o">::</span><span class="no">Undumping</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">CodeRay</span><span class="o">.</span><span class="n">subconstruct_classes</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">0</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:TokensProxy</span> <span class="o">&lt;</span> <span class="no">Object</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">1</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Tokens</span> <span class="o">&lt;</span> <span class="nb">Array</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">2</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:WordList</span> <span class="o">&lt;</span> <span class="no">Hash</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">3</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Duo</span> <span class="o">&lt;</span> <span class="no">Object</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">4</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Encoders</span><span class="o">::</span><span class="no">Encoder</span> <span class="o">&lt;</span> <span class="no">Object</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">5</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Encoders</span><span class="o">::</span><span class="no">Terminal</span> <span class="o">&lt;</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Encoders</span><span class="o">::</span><span class="no">Encoder</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">6</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:PluginHost</span><span class="o">::</span><span class="no">PluginNotFound</span> <span class="o">&lt;</span> <span class="no">LoadError</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">7</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:PluginHost</span><span class="o">::</span><span class="no">HostNotFound</span> <span class="o">&lt;</span> <span class="no">LoadError</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">8</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Scanners</span><span class="o">::</span><span class="no">Scanner</span> <span class="o">&lt;</span> <span class="no">StringScanner</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">9</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Scanners</span><span class="o">::</span><span class="no">Ruby</span> <span class="o">&lt;</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Scanners</span><span class="o">::</span><span class="no">Scanner</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">10</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:WordList</span><span class="o">::</span><span class="no">CaseIgnoring</span> <span class="o">&lt;</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:WordList</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">11</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:FileType</span><span class="o">::</span><span class="no">UnknownFileType</span> <span class="o">&lt;</span> <span class="no">Exception</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">12</span><span class="o">]</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Styles</span><span class="o">::</span><span class="no">Style</span> <span class="o">&lt;</span> <span class="no">Object</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if I want to know the local class methods available for <code>CodeRay::WordList</code> and local instance methods availabe for <code>CodeRay::TokensProxy</code>, I can type:</p>

<figure class='code'><figcaption><span>pry</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Styles</span><span class="o">::</span><span class="no">Style</span><span class="o">.</span><span class="n">local_methods</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span>      <span class="n">aliases</span><span class="p">()</span>       <span class="no">Class</span> <span class="p">(</span><span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Plugin</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span>  <span class="n">plugin_host</span><span class="p">(</span><span class="o">*</span><span class="n">host</span><span class="p">)</span>  <span class="no">Class</span> <span class="p">(</span><span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Plugin</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">2</span><span class="o">]</span>    <span class="n">plugin_id</span><span class="p">()</span>       <span class="no">Class</span> <span class="p">(</span><span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Plugin</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">register_for</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>     <span class="no">Class</span> <span class="p">(</span><span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Plugin</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">4</span><span class="o">]</span>        <span class="n">title</span><span class="p">(</span><span class="o">*</span><span class="n">title</span><span class="p">)</span> <span class="no">Class</span> <span class="p">(</span><span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:Plugin</span><span class="p">)</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:TokensProxy</span><span class="o">.</span><span class="n">local_instance_methods</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">0</span><span class="o">]</span>    <span class="n">block</span><span class="p">()</span>                  <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:TokensProxy</span> <span class="p">(</span><span class="n">unbound</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">1</span><span class="o">]</span>   <span class="n">block</span><span class="o">=</span><span class="p">(</span><span class="n">arg1</span><span class="p">)</span>              <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:TokensProxy</span> <span class="p">(</span><span class="n">unbound</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">2</span><span class="o">]</span>     <span class="n">each</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>       <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:TokensProxy</span> <span class="p">(</span><span class="n">unbound</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">3</span><span class="o">]</span>   <span class="n">encode</span><span class="p">(</span><span class="n">encoder</span><span class="p">,</span> <span class="o">*</span><span class="n">options</span><span class="p">)</span> <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:TokensProxy</span> <span class="p">(</span><span class="n">unbound</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">4</span><span class="o">]</span>    <span class="n">input</span><span class="p">()</span>                  <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:TokensProxy</span> <span class="p">(</span><span class="n">unbound</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">5</span><span class="o">]</span>   <span class="n">input</span><span class="o">=</span><span class="p">(</span><span class="n">arg1</span><span class="p">)</span>              <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:TokensProxy</span> <span class="p">(</span><span class="n">unbound</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">6</span><span class="o">]</span>     <span class="n">lang</span><span class="p">()</span>                  <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:TokensProxy</span> <span class="p">(</span><span class="n">unbound</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">7</span><span class="o">]</span>    <span class="n">lang</span><span class="o">=</span><span class="p">(</span><span class="n">arg1</span><span class="p">)</span>              <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:TokensProxy</span> <span class="p">(</span><span class="n">unbound</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">8</span><span class="o">]</span>  <span class="n">options</span><span class="p">()</span>                  <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:TokensProxy</span> <span class="p">(</span><span class="n">unbound</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span> <span class="mi">9</span><span class="o">]</span> <span class="n">options</span><span class="o">=</span><span class="p">(</span><span class="n">arg1</span><span class="p">)</span>              <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:TokensProxy</span> <span class="p">(</span><span class="n">unbound</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">10</span><span class="o">]</span>  <span class="n">scanner</span><span class="p">()</span>                  <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:TokensProxy</span> <span class="p">(</span><span class="n">unbound</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">11</span><span class="o">]</span>   <span class="n">tokens</span><span class="p">()</span>                  <span class="ss">CodeRay</span><span class="p">:</span><span class="ss">:TokensProxy</span> <span class="p">(</span><span class="n">unbound</span><span class="p">)</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some other fun things to try out:</p>

<figure class='code'><figcaption><span>pry</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Fixnum</span><span class="o">.</span><span class="n">class_ancestors</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="no">Fixnum</span> <span class="o">&lt;</span> <span class="nb">Integer</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="nb">Integer</span> <span class="o">&lt;</span> <span class="no">Numeric</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="no">Numeric</span> <span class="o">&lt;</span> <span class="no">Object</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="no">Object</span> <span class="o">&lt;</span> <span class="no">BasicObject</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="no">BasicObject</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Fixnum</span><span class="o">.</span><span class="n">siblings</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="no">Bignum</span> <span class="o">&lt;</span> <span class="nb">Integer</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;active_record&#39;</span>
</span><span class='line'><span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="mi">8</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">subconstant_names</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="ss">:ACTIONS</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="ss">:UNASSIGNABLE_KEYS</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="ss">:CALLBACKS</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="ss">:ATTRIBUTE_TYPES_CACHED_BY_DEFAULT</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="ss">:NAME_COMPILABLE_REGEXP</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="ss">:CALL_COMPILABLE_REGEXP</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="ss">:CALLBACK_FILTER_TYPES</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">subconstants</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="ss">:create</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="ss">:destroy</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="ss">:update</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;id&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;_destroy&quot;</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span> <span class="mi">0</span><span class="o">]</span> <span class="ss">:after_initialize</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span> <span class="mi">1</span><span class="o">]</span> <span class="ss">:after_find</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span> <span class="mi">2</span><span class="o">]</span> <span class="ss">:after_touch</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span> <span class="mi">3</span><span class="o">]</span> <span class="ss">:before_validation</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span> <span class="mi">4</span><span class="o">]</span> <span class="ss">:after_validation</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span> <span class="mi">5</span><span class="o">]</span> <span class="ss">:before_save</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span> <span class="mi">6</span><span class="o">]</span> <span class="ss">:around_save</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span> <span class="mi">7</span><span class="o">]</span> <span class="ss">:after_save</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span> <span class="mi">8</span><span class="o">]</span> <span class="ss">:before_create</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span> <span class="mi">9</span><span class="o">]</span> <span class="ss">:around_create</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">10</span><span class="o">]</span> <span class="ss">:after_create</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">11</span><span class="o">]</span> <span class="ss">:before_update</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">12</span><span class="o">]</span> <span class="ss">:around_update</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">13</span><span class="o">]</span> <span class="ss">:after_update</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">14</span><span class="o">]</span> <span class="ss">:before_destroy</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">15</span><span class="o">]</span> <span class="ss">:around_destroy</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">16</span><span class="o">]</span> <span class="ss">:after_destroy</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">17</span><span class="o">]</span> <span class="ss">:after_commit</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">18</span><span class="o">]</span> <span class="ss">:after_rollback</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="ss">:datetime</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="ss">:timestamp</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="ss">:time</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="ss">:date</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="sr">/\A[a-zA-Z_]\w*[!?=]?\z/</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="sr">/\A[a-zA-Z_]\w*[!?]?\z/</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="ss">:before</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="ss">:after</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="ss">:around</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Thanks to the following posts on StackOverflow for guidance:</em></p>

<ol>
<li><a href="http://www.natontesting.com/2010/06/30/how-to-get-the-submodules-of-a-ruby-module/">http://www.natontesting.com/2010/06/30/how-to-get-the-submodules-of-a-ruby-module/</a></li>
<li><a href="http://stackoverflow.com/questions/2393697/look-up-all-descendants-of-a-class-in-ruby">http://stackoverflow.com/questions/2393697/look-up-all-descendants-of-a-class-in-ruby</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summary - Extending Ruby with Ruby]]></title>
    <link href="http://gglin.github.io/blog/2013/07/04/how-to-best-use-github/"/>
    <updated>2013-07-04T07:57:00-04:00</updated>
    <id>http://gglin.github.io/blog/2013/07/04/how-to-best-use-github</id>
    <content type="html"><![CDATA[<p>I find metaprogramming to be a fascinating subject.  Code that writes itself! Keep DRY! Do crazy things in 10 lines that might otherwise take 100 or even be impossible!</p>

<p>Naturally, I was attracted to a presentation <a href="https://twitter.com/michaelfairley">Michael Fairley</a> gave entitled &ldquo;Extending Ruby with Ruby&rdquo;.  Well, that and the fact that Michael&rsquo;s name reminded me of Michelle Fairley, who plays Catelyn Stark on my favorite show, Game of Thrones.</p>

<script async class="speakerdeck-embed" data-id="4f9861a8eb6cd200ef00fbb8" data-ratio="1.04918032786885" src="http://gglin.github.io//speakerdeck.com/assets/embed.js"></script>


<p>His central thesis is that Rubyists usually think of metaprogramming as a tool used for two things &ndash; keeping DRY and saving some typing, and monkeypatching a library that doesn&rsquo;t work as well as you would like.  However, Ruby&rsquo;s metaprogramming capabilities are much more powerful than this, and you can use Ruby to easily add new, awesome features to the language itself.  He gives a few specific examples, drawing inspiration from other languages:</p>

<h3>Function Decorators from Python</h3>

<p><strong><em>Python</em></strong> has a design pattern called &ldquo;<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">function decorators</a>&rdquo;, which allow us to inject or change code directly into a method, for additional clarity and to avoid writing a lot of boilerplate code.  For example:</p>

<figure class='code'><figcaption><span>Function Decorator Example in Python</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@transactional</span>
</span><span class='line'><span class="k">def</span> <span class="nf">send_money</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">amount</span><span class="p">):</span>
</span><span class='line'>  <span class="n">from</span><span class="o">.</span><span class="n">balance</span> <span class="o">-=</span> <span class="n">amount</span>
</span><span class='line'>  <span class="n">to</span><span class="o">.</span><span class="n">balance</span> <span class="o">+=</span> <span class="n">amount</span>
</span><span class='line'>  <span class="n">from</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>  <span class="n">to</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows the send_money method to be wrapped in a &ldquo;transactional&rdquo; function, i.e. the send_money method won&rsquo;t execute to the database unless every transaction in it is successful; otherwise all changes are rolled back.  This is defined by the &ldquo;transactional&rdquo; function, defined elsewhere but used to &ldquo;decorate&rdquo; the top of this method.  In Ruby we could use blocks or modify the method after the fact, but this is not clean as you can no longer trace execution of the method from top to bottom.</p>

<p>Luckily, even though Python has this cool feature that doesn&rsquo;t exist in Ruby, we can add this functionality to Ruby itself given its extensible nature.  Michael created a neat gem, <a href="https://github.com/michaelfairley/method_decorators">method_decorators</a>, which does exactly this (there is <a href="https://github.com/fredwu/ruby_decorators">another gem</a> which does something similar). The amazing thing is that the core added functionality is accomplished in a <a href="https://github.com/michaelfairley/method_decorators/blob/master/lib/method_decorators/decorator.rb">little more than a dozen lines of</a> <a href="https://github.com/michaelfairley/method_decorators/blob/master/lib/method_decorators.rb">code</a>! The result of that is we can now mimic function decorators in Ruby:</p>

<figure class='code'><figcaption><span>Function Decorator Added to Ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">+</span><span class="no">Transactional</span>
</span><span class='line'><span class="k">def</span> <span class="nf">send_money</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">amount</span><span class="p">)</span>
</span><span class='line'>  <span class="n">from</span><span class="o">.</span><span class="n">balance</span> <span class="o">-=</span> <span class="n">amount</span>
</span><span class='line'>  <span class="n">to</span><span class="o">.</span><span class="n">balance</span> <span class="o">+=</span> <span class="n">amount</span>
</span><span class='line'>  <span class="n">from</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>  <span class="n">to</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Partial Applications from Scala</h3>

<p>In <strong><em>Scala</em></strong>, bulk operations on a collection of items (aka enumerables in Ruby), such as map, filter, and reduce, can be shorthanded using an underscore (&ldquo;_&rdquo;) for clarity.  This is part of a concept known as <a href="http://en.wikipedia.org/wiki/Partial_application">partial applications</a>:</p>

<figure class='code'><figcaption><span>Making code pretty in Scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="n">i</span> <span class="k">=&gt;</span> <span class="n">i</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span> <span class="c1">// List(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;)</span>
</span><span class='line'><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>      <span class="c1">// List(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby has something similar:</p>

<figure class='code'><figcaption><span>Making code pretty in Ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">to_s</span> <span class="p">}</span> <span class="c1"># [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span>       <span class="c1"># [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, Scala has support for more complex versions of these anonymous functions which Ruby does not:</p>

<figure class='code'><figcaption><span>Making code pretty in Scala which doesn&#8217;t work in Ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">).</span><span class="n">reduce</span><span class="o">((</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">i</span> <span class="o">+</span> <span class="o">(</span><span class="n">j</span> <span class="o">*</span> <span class="mi">2</span><span class="o">))</span> <span class="c1">// 11</span>
</span><span class='line'><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">).</span><span class="n">reduce</span><span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="o">(</span><span class="k">_</span> <span class="o">*</span> <span class="mi">2</span><span class="o">))</span>          <span class="c1">// 11</span>
</span><span class='line'>
</span><span class='line'><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">).</span><span class="n">filter</span><span class="o">(</span><span class="n">i</span> <span class="k">=&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">)</span>       <span class="c1">// List(1)</span>
</span><span class='line'><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">).</span><span class="n">filter</span><span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="k">_</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">)</span>            <span class="c1">// List(1)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once again, thanks to the power of Ruby metaprogramming, we can accomplish something similar in Ruby with just a few lines of code! The key is defining a &ldquo;_&rdquo; (underscore) method in the base Object class which can take a block (see slides 88-109 for details).  With the added features, Ruby now has a similar functionality:</p>

<figure class='code'><figcaption><span>After monkeypatching Ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">reduce</span><span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">|</span> <span class="n">i</span> <span class="o">+</span> <span class="p">(</span><span class="n">j</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="p">}</span> <span class="c1"># 11</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">_</span><span class="p">{</span><span class="n">_</span> <span class="o">+</span> <span class="p">(</span><span class="n">_</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)}</span> <span class="p">)</span>   <span class="c1"># 11</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">select</span><span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span> <span class="p">}</span>     <span class="c1"># [1]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">select</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">_</span><span class="p">{</span><span class="mi">2</span> <span class="o">*</span> <span class="n">_</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">}</span> <span class="p">)</span>     <span class="c1"># [1]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, monkeypatching the Object class with something as basic as an underscore is probably not the best idea, but it does show the power of Ruby in being able to extend itself and mimic other languages.</p>

<h3>Lazy Evaluation from Haskell</h3>

<p>The last example Michael gives is <a href="http://en.wikipedia.org/wiki/Lazy_evaluation">lazy evaluations</a> in <strong><em>Haskell</em></strong>, e.g. not executing an http request until it is needed.  We can easily define a Lazy class to be used as a wrapper (or even as a method decorator, ala the first example) to accomplish something similar:</p>

<figure class='code'><figcaption><span>Lazy Evaluation class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Lazy</span> <span class="o">&lt;</span> <span class="no">BasicObject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@block</span> <span class="o">=</span> <span class="n">block</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@result</span> <span class="o">||=</span> <span class="vi">@block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="vi">@result</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if compare these two blocks of code:</p>

<figure class='code'><figcaption><span>without Lazy Eval</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">three</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>  <span class="mi">3</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">three</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>with Lazy Eval</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">three</span>
</span><span class='line'>  <span class="no">Lazy</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>    <span class="mi">3</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">three</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, for something absolutely bonkers, Michael changes the way Ruby as a language works so that EVERYTHING can use lazy evaluation, mimicking Haskell. He is able to do this via the <em>ObjectSpace</em> class and <em>instance_methods</em> method, which allows him to loop through every method in every module and class (with some exceptions):</p>

<figure class='code'><figcaption><span>Craziness in Ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">modules</span> <span class="o">=</span> <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">Module</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">modules</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span>
</span><span class='line'>  <span class="n">k</span><span class="o">.</span><span class="n">instance_methods</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'>    <span class="k">next</span> <span class="k">if</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="c1"># some exceptions</span>
</span><span class='line'>    <span class="n">im</span> <span class="o">=</span> <span class="n">k</span><span class="o">.</span><span class="n">instance_method</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>    <span class="n">k</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:define_method</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="k">do</span> <span class="o">|*</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Lazy</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">im</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sounds a little dangerous to me, but it does have some practical applications.  For example, in a simple Rails app which might fetch tweets from the Twitter API:</p>

<figure class='code'><figcaption><span>Lazy Evaluation applied to Rails</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Controller</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@tweets</span> <span class="o">=</span> <span class="no">Lazy</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">get_from_twitter_api</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># View</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% @tweets.each </span><span class="k">do</span> <span class="o">|</span><span class="n">tweet</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= tweet.author_name %&gt;</span><span class="p">:</span>
</span><span class='line'>  <span class="o">&lt;%=</span> <span class="n">tweet</span><span class="o">.</span><span class="n">text</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we want the client browser to fetch the CSS and JS as quickly as possible, we can make the &ldquo;get_from_twitter_api&rdquo; request lazy.</p>

<h3>The Power of Metaprogramming</h3>

<p>Seeing these examples really made me appreciate the power of Ruby even more.  Like many things in life, I think the best things should be easy to learn, but hard to master.  It should cater to beginners (with convention over configuration) but still be powerful for the advanced (e.g. metaprogramming).</p>

<p>One of the reasons I am where I am now is that I believe in the power of software to change the world, the power to fix problems, and as programmers I think this mindset should apply everywhere &ndash; not just the big macro problems in the world, but the small, nitty-gritty micro problems as well.  Software should facilitate answers to real-world huge problems such as &ldquo;how do I get to the nearest train station?&rdquo; or &ldquo;what are my friends doing?&rdquo;, but it should also facilitate answers to problems such as &ldquo;can I get my programming language to behave the way I want it to?&rdquo;  Before you can change the world, you should be able to change yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You can learn a lot from shaving a yak]]></title>
    <link href="http://gglin.github.io/blog/2013/06/28/yak-shaving/"/>
    <updated>2013-06-28T07:41:00-04:00</updated>
    <id>http://gglin.github.io/blog/2013/06/28/yak-shaving</id>
    <content type="html"><![CDATA[<p>On the third day of class, we learned a term called &ldquo;yak shaving&rdquo;.  The idea is that you want to do something, let&rsquo;s say change a lightbulb, but that ends up requiring you to do something else, which in turn requires you to do something else, which requires you to do something again&hellip;  After diving into subtask after subtask, eventually you find yourself shaving a yak when all you wanted to do was change your lightbulb!</p>

<p><em>Etymology: the term is thought to have been coined at the MIT AI Lab circa 2000, as inspired by an episode of Ren &amp; Stimpy. Here are some definitions from various sources: <a href="http://projects.csail.mit.edu/gsb/old-archive/gsb-archive/gsb2000-02-11.html">MIT</a>, <a href="http://www.urbandictionary.com/define.php?term=yak%20shaving">Urbandictionary</a>, <a href="http://sethgodin.typepad.com/seths_blog/2005/03/dont_shave_that.html">Seth Godin</a> (who helped popularize the term)</em></p>

<p>I didn&rsquo;t think much about the term until pretty recently.  In the last 2 weeks or so, as I&rsquo;ve been diving heavily into code, I&rsquo;ve found myself shaving yaks constantly &ndash; I can see why it&rsquo;s a &ldquo;thing&rdquo;
in programming now!</p>

<p>Case in point &ndash; the jukebox.  As my teammates can attest, I&rsquo;ve been building a command-line interface jukebox which when given a list of songs, will retrieve the songs&#8217; artists and genres, and allow the user to browse or choose by category and select a song to &ldquo;play&rdquo; (it only displays the song &amp; doesn&rsquo;t actually play it yet, haha).  Well technically, this was an assignment everyone had to do, but since I liked the idea I decided to take it a lot further. (Also, to order to generate a song list, we parsed a directory for mp3 files and built a library of artists, songs, and genres)</p>

<p><a href="https://github.com/gglin/playlister-rb/blob/master/lib/models/jukebox.rb">My current version of the CLI jukebox</a> can not only browse by &ldquo;artist&rdquo;, &ldquo;song&rdquo;, or &ldquo;genre&rdquo;, but it can also search by artist, song, or genre, and whatever the results are of the current search or browsing results, you can keep entering input to further filter results, as well as choose a result by number (thanks <a href="http://www.twitter.com/ningbit">Ning</a> for some of the inspiration!)</p>

<h3>Here are some examples of yak shaving while making the CLI jukebox:</h3>

<ul>
<li>In order to get the program to understand so many different kinds of user inputs, I ended up having to learn regular expressions (<a href="http://www.rubular.com">Rubular</a> is awesome!).  Specifically, valid commands that the program understands are stored in class constant:</li>
</ul>


<figure class='code'><figcaption><span>Valid Inputs </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">VALID_COMMANDS</span> <span class="o">=</span> <span class="o">[</span><span class="sr">/^(artist|song|genre)s?$/</span><span class="p">,</span> <span class="sr">/^(artist|song|genre)\s+\S+/</span><span class="p">,</span> <span class="s2">&quot;stop&quot;</span><span class="p">,</span> <span class="s2">&quot;help&quot;</span><span class="p">,</span> <span class="s2">&quot;exit&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows for the program to understand the input &ldquo;artist(s)&rdquo;, &ldquo;song(s)&rdquo;, &ldquo;genre(s)&rdquo;, as well as the input &ldquo;artist [name or number]&rdquo;, &ldquo;song [name or number]&rdquo;, &ldquo;genre [name or number]&rdquo;.</p>

<p>Here is what my code for seeing whether or not a valid command is recognized looks like:</p>

<figure class='code'><figcaption><span>See if input is valid</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@valid_command_entered</span> <span class="o">=</span> <span class="o">!</span><span class="no">VALID_COMMANDS</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="vi">@command</span><span class="p">)</span><span class="o">.</span><span class="n">empty?</span>
</span></code></pre></td></tr></table></div></figure>


<p>This doesn&rsquo;t work though.  After some banging my head on the wall, I ended up reading the <a href="http://ruby-doc.org/core-2.0/Enumerable.html#method-i-grep">&ldquo;grep&rdquo; documentation in the Ruby Enumerables module</a>, and discovered the problem:</p>

<figure class='code'><figcaption><span>Problem</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="c1"># [element1, element2, etc].grep(pattern) only matches when pattern === element</span>
</span><span class='line'> <span class="c1"># However, if element is a regular expression grep will fail to find the match</span>
</span><span class='line'>  <span class="c1">#    /abc/ === &quot;abc&quot; returns true</span>
</span><span class='line'>  <span class="c1">#    However, &quot;abc&quot; === /abc/ returns false</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1"># We want to enhance the functionality so that it also matches when element =~ pattern</span>
</span><span class='line'>  <span class="c1">#    /abc/ =~ &quot;abc&quot;  &amp;  &quot;abc&quot; =~ /abc/ will both find a match</span>
</span><span class='line'>  <span class="c1">#    if element and pattern have the same class, &quot;=~&quot; won&#39;t work and we will have to use ==</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple enough.  We open the class and give it a new method grep2:</p>

<figure class='code'><figcaption><span>The Fix</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="o">::</span><span class="nb">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">grep2</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">pattern</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="n">element</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'>        <span class="n">element</span> <span class="o">==</span> <span class="n">pattern</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">element</span> <span class="o">=~</span> <span class="n">pattern</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>After creating this program on my own computer, I wanted to import this to the web so that it could run as a CLI &ldquo;web app&rdquo; over the internet.  I was inspired by a few command-line interface websites: <a href="http://uni.xkcd.com">xkcd</a>, <a href="http://goosh.org/#login">goosh</a>, After many futile attempts at finding an answer which made me question my google-fu, I finally found something reasonable which had been staring at me in the first page of google results: a Ruby gem called <a href="http://codegram.github.io/rack-webconsole/">Rack Webconsole</a>! After installing, more banging my head on the wall and finagling, I finally got it to work:</li>
</ul>


<p><img src="http://i.imgur.com/Sgbpwb2.png">
<img src="http://i.imgur.com/E633goF.png"></p>

<p>Now I need to learn how to get &ldquo;puts&rdquo; and &ldquo;gets&rdquo; to work in the webconsole interface instead of on the server-side console:</p>

<figure class='code'><figcaption><span>To be fixed&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">output</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">string</span> <span class="c1">#=&gt; doesn&#39;t work right</span>
</span><span class='line'>    <span class="c1"># Ripl.shell.print_result(string)</span>
</span><span class='line'>    <span class="c1"># Rack::Webconsole::Shell::eval_query(string)[:result]</span>
</span><span class='line'>    <span class="c1"># Ripl.shell.loop_eval(string)</span>
</span><span class='line'>    <span class="c1">#   ==&gt; none of the above work...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">input</span>
</span><span class='line'>    <span class="c1"># gets  =&gt; no longer works</span>
</span><span class='line'>    <span class="c1"># Ripl.shell.loop_once</span>
</span><span class='line'>    <span class="c1">#   ==&gt; fix this too...</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>I also learned about <a href="https://news.ycombinator.com/item?id=2802281">a little bit about XRSF</a>, a way for bad people to hack into your website, as I was learning about Webconsole.  In retrospect, using this gem probably isn&rsquo;t the best idea to use in production, though it&rsquo;s pretty awesome in development.  Maybe I&rsquo;ll learn enough javascript by looking at the source code of sites like xkcd and goosh to make this work someday.</li>
</ul>


<h3>Enjoying the view and striving for the destination</h3>

<p>There&rsquo;s always more to learn, and to do something I thought would be so simple ended up requiring hours and hours of banging my head on the way.  However, in retrospect it was all a great learning experience and helped me become a better coder, as I suspect yak shaving can oftentimes be.</p>

<p>It&rsquo;s the journey that matters, not the destination.  However, a program that doesn&rsquo;t work right isn&rsquo;t useful either.  So I guess both are important &ndash; enjoy the view along the way, but to learn the most, don&rsquo;t stay satisfied until you reach the destination.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I did it My Way]]></title>
    <link href="http://gglin.github.io/blog/2013/06/24/i-did-it-my-way/"/>
    <updated>2013-06-24T01:04:00-04:00</updated>
    <id>http://gglin.github.io/blog/2013/06/24/i-did-it-my-way</id>
    <content type="html"><![CDATA[<h3>The Web as a Virtual Country</h3>

<p>So my parents came into town this weekend to visit, and I was explaining to them all the things I&rsquo;ve learned in the last month or so: HTML, CSS, Javascript, SQL, Ruby, MVC, Rails, etc.</p>

<p>We&rsquo;ve only covered HTML, CSS, SQL, and Ruby, and how the Internet works so far in class (the other topics being self-taught so far based on prepwork), but regardless, I was explaining to my parents how I understood all these things fit together.  Specifically, what the heck is the difference between PHP, Python, Ruby, Ruby on Rails, and all these terms that outside observers might hear about but not understand the difference between.</p>

<p>Struggling to explain these concepts in a short, concise manner, I remembered an analogy I had heard before: <em>the web as a virtual city</em>. Extending this analogy further:</p>

<ul>
<li>The browser / internet infrastructure  =~  cars / highways</li>
<li>Websites  =~  actual stores or buildings</li>
<li>Web application frameworks (e.g. Rails)  =~  framework or skeleton of a building</li>
<li>Programming languages  =~  building materials (e.g., Ruby could be wood, Python could be brick, PHP could be straw &ndash; <em>just as an example, not implying anything about the merits of any language</em>)</li>
</ul>


<p>We always talk about coders as &ldquo;builders&rdquo;, and I think it&rsquo;s even more true than what most people realize.  What I essentially learned in the last month were the tools of the craft, the art of carpentry or brick-laying.  Now it&rsquo;s time to learn how to build buildings.  But before I start building buildings, I need to understand what a house actually looks like and how it functions.</p>

<h3>Introducing: Sinatra</h3>

<p>According to the <a href="http://www.sinatrarb.com/intro.html">official website</a>, <strong>Sinatra</strong> &ldquo;is a <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> for quickly creating web applications in Ruby with minimal effort.&rdquo;  If we keep with the analogy, Sinatra is a much easier framework for building simple houses, while something like Rails is a lot more powerful and allows us to build all kinds of buildings, but at the expense of requiring a lot more complexity.</p>

<p><em>On a side note, did you know that if you search for &ldquo;Sinatra&rdquo; on Google, the first result is actually Ruby Sinatra and not Frank Sinatra? Crazy eh? Thanks <a href="https://twitter.com/StevenABrooks">@StevenABrooks</a> for the tip!</em></p>

<p>So obviously it makes sense to learn how to build a simple house before building a skyscraper, eh?  And even before I start to build houses, it might be a good idea to look at what other peoples&#8217; houses look like, eh? Luckily thanks to the open source movement, we can see exactly how sites are built and learn how to organize our tools (i.e. codebase) to best start the building process.  Thanks, yer ol&#8217; <a href="http://www.github.com">Hub o&#8217; Gits</a>!</p>

<p>I picked a Sinatra web app, and analyzed its codebase to learn how its floors are laid, how rooms are connected, etc, to better design my own floorplans in the future.  And what better app to look at than the appropriately-named &ldquo;Dashing&rdquo;?</p>

<h3>Sinatra is not Dashing, but Dashing is Sinatra?</h3>

<p><a href="http://shopify.github.io/dashing/">Dashing</a> by <a href="http://www.shopify.com">Shopify</a> definitely lives up to its name &ndash; check out demos <a href="http://dashingdemo.herokuapp.com/sample">here</a> and <a href="http://dashingdemo.herokuapp.com/sampletv">here</a>.  Dashing is &ldquo;a Sinatra based framework that lets you build beautiful dashboards&rdquo;. Its UI is similar to Window 8&rsquo;s, except without the evil-empirishness of a close-sourced monopoly; I can look behind the curtain to see a <a href="https://github.com/Shopify/dashing"> well-designed, simple codebase in the repo</a>.  Here&rsquo;s what it looks like:</p>

<ul>
<li><strong>/bin</strong> &ndash; inside is a single ruby binary for the command line inputs</li>
<li><strong>/javascripts</strong> &ndash; where all the magic of the UI happens. The .js files inside include JQuery, as well as a batman.js file, which seems to be linked to <a href="https://github.com/Shopify/batman">another Shopify product</a></li>
<li><strong>/lib</strong> &ndash; there is only single file in here, dashing.rb.  This appears to be the actual Sinatra application for interfacing with the web servers and &lsquo;net.  So even though this file is very small compared to some others, it is essential &ndash; without it this would not be a web app.</li>
<li><strong>/templates</strong> &ndash; there are a few miscellaneous templates in here.  The biggie is a folder inside called <strong>/projects</strong>.  The way Dashing works, you can generate entire projects with the Dashing gem, by typing &lsquo;dashing new sweet_dashboard_project&rsquo; into CLI, which will use this <strong>/projects</strong> folder as a template</li>
<li><strong>/test</strong> &ndash; a pretty simple set of tests in the test suite</li>
<li><strong>.gitignore</strong> &ndash; pretty standard; this tells git what kinds of files to ignore when creating or changing a repo</li>
<li><strong>Gemfile</strong> &ndash; all Ruby gems have this</li>
<li><strong>MIT-LICENSE</strong> &ndash; pretty standard</li>
<li><strong>README.md</strong> &ndash; pretty standard</li>
<li><strong>Rakefile</strong> &ndash; pretty standard. This rakefile makes it super simple for Ruby to run your test suite</li>
<li><strong>dashing.gemspec</strong> &ndash; This contains gem specifications &ndash; pretty standard for when we want package a library into a Ruby gem</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I learned about programming from a delivery guy]]></title>
    <link href="http://gglin.github.io/blog/2013/06/14/what-i-learned-about-programming-from-a-delivery-guy/"/>
    <updated>2013-06-14T00:27:00-04:00</updated>
    <id>http://gglin.github.io/blog/2013/06/14/what-i-learned-about-programming-from-a-delivery-guy</id>
    <content type="html"><![CDATA[<p>So today, as I was heading up the elevator on my way to my apartment, a food delivery guy gets into the elevator.</p>

<p><em>Some context: I live on the 46th floor of my building, so it&rsquo;s always slightly annoying when people get into the elevator on the way up &ndash; that&rsquo;s 2 more floors the elevator has to stop at!  It&rsquo;s tough enough having the elevator stop at a bunch of floors on its way down; I&rsquo;d rather not have it do that on the way up (I know, first world problem)</em></p>

<p>Now, the delivery guy not only decides to hit another floor (let&rsquo;s say <code>35</code>) between the floor he got on (let&rsquo;s say it was <code>20</code>) and my floor (<code>46</code>), but he also decides to hit the button for the <code>penthouse</code> floor! This doesn&rsquo;t really annoy me as I will be getting off the elevator before then, but it does pique my interest&hellip;</p>

<p>&hellip;as soon as he gets off on the 35th floor, he immediately hits the <code>down</code> button on that floor and then hurries down the hallway to make his delivery.</p>

<p>How strange.  I think about this for a second before coming up with an explanation:</p>

<h3>Elevator Workflow</h3>

<p>This is the delivery guy&rsquo;s &ldquo;workflow&rdquo; &ndash; as soon as he gets into the elevator, he wants to make sure the elevator is going to go to the top floor.  That way, as soon as he gets off and immediately hits <code>down</code>, he is ensured that there is an elevator &ndash; the one he just got off of &ndash; which will go to the top floor and then come down to meet him as he finishes his delivery, assuming the time it takes to deliver is similar to the time it takes for the elevator to go to the top and then come down to meet him.  If he had not hit the <code>penthouse</code> button, all the elevators might already be at the bottom and he would have to wait much longer for one of them to come up and take him down.</p>

<p><em>Now I know why delivery people are always so impatient when I don&rsquo;t come to the door immediately!</em></p>

<h3>Delivery = Programming</h3>

<p>So how is this related to programming you ask? It might not be that related. But my head has been swimming in code for the last 3 weeks, so these are the kinds of analogies I&rsquo;m drawing:</p>

<ol>
<li><p>In my experience to the world of programming, it seems that efficiency is huge. Sure, maybe if you don&rsquo;t know the keyboard shortcut to a common task, you might waste a second each time, but compound this x1000s and you might be wasting hours, days, weeks, or even longer if programming is a lifelong endeavor.  In a similar way, this delivery guy&rsquo;s methodology might save him a minute or two each time, but compound that and it might become pretty substantial.</p></li>
<li><p>To an outside observer, these little &ldquo;hacks&rdquo; might seem mysterious at first (or maybe just to me), but once understood I have an &ldquo;Aha!&rdquo; moment. When thinking about or looking at code, I often find that some of the individual parts don&rsquo;t make a lot of sense on their own &ndash; e.g. &ldquo;why did the delivery guy press the top floor?? It&rsquo;s not like he&rsquo;s going there since he&rsquo;s getting off before then&rdquo;.  But once understood as part of a whole, the code is crucial or complementary.  Conversely, there is some code which makes perfect sense when I see it &ndash; e.g. &ldquo;press the <code>down</code> button as soon as you get off on a floor&rdquo; &ndash; but there&rsquo;s a lot of nuances that are easy to miss upon cursory inspection, e.g. the elevator going to the top floor complementing the more obvious action.</p></li>
<li><p>I was exposed to the method of pressing the <code>penthouse</code> floor button, before seeing the method of pressing <code>down</code> immediately after getting off the elevator.  However, pressing <code>down</code> is the first real action after getting off the elevator, and it just so happens that the ideal result occurs as a result of the <code>penthouse</code> method triggering much earlier.  Similarly, when reading code, things don&rsquo;t seem to be as straightforward as reading downwards.  Control flow, methods being invoked, etc add complexity to how code is read, and it becomes a skill to mentally conceptualize how things are flowing.</p></li>
<li><p>It would probably have been easiest to figure all this out by <em>asking</em>. If I was a delivery guy I might have figured this out on my own, but there is a chance I wouldn&rsquo;t have and wasted a lot of time.  The actual task of delivering things, just like programming, is oftentimes inherently lonely, yet there are so many ways it could/should be social &ndash; you have to interact with people in some capacity in order to get the product to the customer. And like many industries, there is so much to learn from others, whether it is through mentorship, apprenticeship, other resources, pair programming, or whatnot.</p></li>
<li><p>Software development even uses similar language as food delivery &ndash; &ldquo;shipping&rdquo;, &ldquo;delivery / deployment&rdquo;, etc.</p></li>
</ol>


<h3>Stand &amp; Deliver</h3>

<p>As I&rsquo;m learning about data modeling and object-oriented programming, what might be interesting is modeling out the actual elevator / food / &ldquo;hacker&rdquo; delivery guy in code.   More to come on a later date?</p>

<hr />

<h2>First Meetup</h2>

<p>On an unrelated note, today was the first meeting this semester of the NYC on Rails Meetup! Here&rsquo;s a snippet of a great presentation on creating a Gem which uses command line to post directly to Tumblr (<a href="http://shitavisays.tumblr.com">ShitAviSays</a>):</p>

<iframe class="vine-embed" src="http://vine.co/v/blU3gmAadgn/embed/simple" width="480" height="480" frameborder="0"></iframe>


<script async src="http://gglin.github.io//platform.vine.co/static/scripts/embed.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://gglin.github.io/blog/2013/06/05/hello-world/"/>
    <updated>2013-06-05T10:43:00-04:00</updated>
    <id>http://gglin.github.io/blog/2013/06/05/hello-world</id>
    <content type="html"><![CDATA[<pre><code>puts "Hello, world!"

document.write('Hello, world!');

#import &lt;stdio.h&gt;
int main( int argc, const char *argv[] ) {
    printf( "Hello world\n" );
    return 0;
}

public class HelloWorld {
   public static void main(String[] args) {
       System.out.println("Hello, world!");
   }
}

print("Hello, world!")

(display "Hello, world!")

main = putStrLn "Hello, world!"

cat('Hello, world!\n')
</code></pre>

<blockquote><p>&ldquo;A smooth sea never made a skilled sailor.&rdquo;</p></blockquote>

<p>Hello, my name is George, and I&rsquo;m a student <a href="http://www.flatironschool.com" title="The Flatiron School">@flatironschool</a>, a 12-week intensive program for aspiring web developers. As part of the program, <a href="http://twitter.com/aviflombaum">@avi</a> has all students regularly maintain a blog.  So after many years of maintaining a digital footprint via only facebook and twitter, here I am!</p>

<p><em>Above is a list of languages I am interested in learning, vaguely listed by interest level, though this is bound to change as I get to know more and more.</em></p>

<h3>A little about me:</h3>

<ul>
<li>BS Chemical Engineering 2008, MIT</li>
<li>Former Management Consultant</li>
<li>Places lived: China, Central PA, Central NJ, Boston, NYC</li>
<li>DOB: 1986-06-25</li>
</ul>


<p>OK that&rsquo;s enough.  Back to code.  See you next time!</p>
]]></content>
  </entry>
  
</feed>
