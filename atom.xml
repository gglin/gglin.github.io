<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Genetically Modified Origin]]></title>
  <link href="http://gglin.github.io/atom.xml" rel="self"/>
  <link href="http://gglin.github.io/"/>
  <updated>2013-06-28T09:31:16-04:00</updated>
  <id>http://gglin.github.io/</id>
  <author>
    <name><![CDATA[George L]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[You can learn a lot from shaving a yak]]></title>
    <link href="http://gglin.github.io/blog/2013/06/28/yak-shaving/"/>
    <updated>2013-06-28T07:41:00-04:00</updated>
    <id>http://gglin.github.io/blog/2013/06/28/yak-shaving</id>
    <content type="html"><![CDATA[<p>On the third day of class, we learned a term called &ldquo;yak shaving&rdquo;.  The idea is that you want to do something, let&rsquo;s say change a lightbulb, but that ends up requiring you to do something else, which in turn requires you to do something else, which requires you to do something again&hellip;  After diving into subtask after subtask, eventually you find yourself shaving a yak when all you wanted to do was change your lightbulb!</p>

<p><em>Etymology: the term is thought to have been coined at the MIT AI Lab circa 2000, as inspired by an episode of Ren &amp; Stimpy. Here are some definitions from various sources: <a href="http://projects.csail.mit.edu/gsb/old-archive/gsb-archive/gsb2000-02-11.html">MIT</a>, <a href="http://www.urbandictionary.com/define.php?term=yak%20shaving">Urbandictionary</a>, <a href="http://sethgodin.typepad.com/seths_blog/2005/03/dont_shave_that.html">Seth Godin</a> (who helped popularize the term)</em></p>

<p>I didn&rsquo;t think much about the term until pretty recently.  In the last 2 weeks or so, as I&rsquo;ve been diving heavily into code, I&rsquo;ve found myself shaving yaks constantly &ndash; I can see why it&rsquo;s a &ldquo;thing&rdquo;
in programming now!</p>

<p>Case in point &ndash; the jukebox.  As my teammates can attest, I&rsquo;ve been building a command-line interface jukebox which when given a list of songs, will retrieve the songs&#8217; artists and genres, and allow the user to browse or choose by category and select a song to &ldquo;play&rdquo; (it only displays the song &amp; doesn&rsquo;t actually play it yet, haha).  Well technically, this was an assignment everyone had to do, but since I liked the idea I decided to take it a lot further. (Also, to order to generate a song list, we parsed a directory for mp3 files and built a library of artists, songs, and genres)</p>

<p><a href="https://github.com/gglin/playlister-rb/blob/master/lib/models/jukebox.rb">My current version of the CLI jukebox</a> can not only browse by &ldquo;artist&rdquo;, &ldquo;song&rdquo;, or &ldquo;genre&rdquo;, but it can also search by artist, song, or genre, and whatever the results are of the current search or browsing results, you can keep entering input to further filter results, as well as choose a result by number (thanks <a href="http://www.twitter.com/ningbit">Ning</a> for some of the inspiration!)</p>

<p>Here are some examples of yak shaving while making the CLI jukebox:</p>

<ul>
<li>In order to get the program to understand so many different kinds of user inputs, I ended up having to learn regular expressions (<a href="http://www.rubular.com">Rubular</a> is awesome!).  Specifically, valid commands that the program understands are stored in class constant:</li>
</ul>


<figure class='code'><figcaption><span>Valid Inputs </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">VALID_COMMANDS</span> <span class="o">=</span> <span class="o">[</span><span class="sr">/^(artist|song|genre)s?$/</span><span class="p">,</span> <span class="sr">/^(artist|song|genre)\s+\S+/</span><span class="p">,</span> <span class="s2">&quot;stop&quot;</span><span class="p">,</span> <span class="s2">&quot;help&quot;</span><span class="p">,</span> <span class="s2">&quot;exit&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows for the program to understand the input &ldquo;artist(s)&rdquo;, &ldquo;song(s)&rdquo;, &ldquo;genre(s)&rdquo;, as well as the input &ldquo;artist [name or number]&rdquo;, &ldquo;song [name or number]&rdquo;, &ldquo;genre [name or number]&rdquo;.</p>

<p>Here is what my code for seeing whether or not a valid command is recognized looks like:</p>

<figure class='code'><figcaption><span>See if input is valid</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@valid_command_entered</span> <span class="o">=</span> <span class="o">!</span><span class="no">VALID_COMMANDS</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="vi">@command</span><span class="p">)</span><span class="o">.</span><span class="n">empty?</span>
</span></code></pre></td></tr></table></div></figure>


<p>This doesn&rsquo;t work though.  After some banging my head on the wall, I ended up reading the <a href="http://ruby-doc.org/core-2.0/Enumerable.html#method-i-grep">&ldquo;grep&rdquo; documentation in the Ruby Enumerables module</a>, and discovered the problem:</p>

<figure class='code'><figcaption><span>Problem</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="c1"># [element1, element2, etc].grep(pattern) only matches when pattern === element</span>
</span><span class='line'> <span class="c1"># However, if element is a regular expression grep will fail to find the match</span>
</span><span class='line'>  <span class="c1">#    /abc/ === &quot;abc&quot; returns true</span>
</span><span class='line'>  <span class="c1">#    However, &quot;abc&quot; === /abc/ returns false</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1"># We want to enhance the functionality so that it also matches when element =~ pattern</span>
</span><span class='line'>  <span class="c1">#    /abc/ =~ &quot;abc&quot;  &amp;  &quot;abc&quot; =~ /abc/ will both find a match</span>
</span><span class='line'>  <span class="c1">#    if element and pattern have the same class, &quot;=~&quot; won&#39;t work and we will have to use ==</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple enough.  We open the class and give it a new method grep2:</p>

<figure class='code'><figcaption><span>The Fix</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="o">::</span><span class="nb">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">grep2</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">pattern</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="n">element</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'>        <span class="n">element</span> <span class="o">==</span> <span class="n">pattern</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">element</span> <span class="o">=~</span> <span class="n">pattern</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>After creating this program on my own computer, I wanted to import this to the web so that it could run as a CLI &ldquo;web app&rdquo; over the internet.  I was inspired by a few command-line interface websites: <a href="http://uni.xkcd.com">xkcd</a>, <a href="http://goosh.org/#login">goosh</a>, After many futile attempts at finding an answer which made me question my google-fu, I finally found something reasonable which had been staring at me in the first page of google results: a Ruby gem called <a href="http://codegram.github.io/rack-webconsole/">Rack Webconsole</a>! After installing, more banging my head on the wall and finagling, I finally got it to work:</li>
</ul>


<p><img src="http://i.imgur.com/Sgbpwb2.png">
<img src="http://i.imgur.com/E633goF.png"></p>

<p>Now I need to learn how to get &ldquo;puts&rdquo; and &ldquo;gets&rdquo; to work in the webconsole interface instead of on the server-side console:</p>

<figure class='code'><figcaption><span>To be fixed&#8230;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">output</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">string</span> <span class="c1">#=&gt; doesn&#39;t work right</span>
</span><span class='line'>    <span class="c1"># Ripl.shell.print_result(string)</span>
</span><span class='line'>    <span class="c1"># Rack::Webconsole::Shell::eval_query(string)[:result]</span>
</span><span class='line'>    <span class="c1"># Ripl.shell.loop_eval(string)</span>
</span><span class='line'>    <span class="c1">#   ==&gt; none of the above work...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">input</span>
</span><span class='line'>    <span class="c1"># gets  =&gt; no longer works</span>
</span><span class='line'>    <span class="c1"># Ripl.shell.loop_once</span>
</span><span class='line'>    <span class="c1">#   ==&gt; fix this too...</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>I also learned about <a href="https://news.ycombinator.com/item?id=2802281">a little bit about XRSF</a>, a way for bad people to hack into your website, as I was learning about Webconsole.  In retrospect, using this gem probably isn&rsquo;t the best idea.  Maybe I&rsquo;ll learn enough javascript by looking at the source code of sites like xkcd and goosh to make this work someday.</li>
</ul>


<p>There&rsquo;s always more to learn, and to do something I thought would be so simple ended up requiring hours and hours of banging my head on the way.  However, in retrospect it was all a great learning experience and helped me become a better coder, as I suspect yak shaving can oftentimes be.</p>

<p>It&rsquo;s the journey that matters, not the destination.  However, a program that doesn&rsquo;t work right isn&rsquo;t useful either.  So I guess both are important &ndash; enjoy the view along the way, but to learn the most, don&rsquo;t stay satisfied until you reach the destination.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I did it My Way]]></title>
    <link href="http://gglin.github.io/blog/2013/06/24/i-did-it-my-way/"/>
    <updated>2013-06-24T01:04:00-04:00</updated>
    <id>http://gglin.github.io/blog/2013/06/24/i-did-it-my-way</id>
    <content type="html"><![CDATA[<h3>The Web as a Virtual Country</h3>

<p>So my parents came into town this weekend to visit, and I was explaining to them all the things I&rsquo;ve learned in the last month or so: HTML, CSS, Javascript, SQL, Ruby, MVC, Rails, etc.</p>

<p>We&rsquo;ve only covered HTML, CSS, SQL, and Ruby, and how the Internet works so far in class (the other topics being self-taught so far based on prepwork), but regardless, I was explaining to my parents how I understood all these things fit together.  Specifically, what the heck is the difference between PHP, Python, Ruby, Ruby on Rails, and all these terms that outside observers might hear about but not understand the difference between.</p>

<p>Struggling to explain these concepts in a short, concise manner, I remembered an analogy I had heard before: <em>the web as a virtual city</em>. Extending this analogy further:</p>

<ul>
<li>The browser / internet infrastructure  =~  cars / highways</li>
<li>Websites  =~  actual stores or buildings</li>
<li>Web application frameworks (e.g. Rails)  =~  framework or skeleton of a building</li>
<li>Programming languages  =~  building materials (e.g., Ruby could be wood, Python could be brick, PHP could be straw &ndash; <em>just as an example, not implying anything about the merits of any language</em>)</li>
</ul>


<p>We always talk about coders as &ldquo;builders&rdquo;, and I think it&rsquo;s even more true than what most people realize.  What I essentially learned in the last month were the tools of the craft, the art of carpentry or brick-laying.  Now it&rsquo;s time to learn how to build buildings.  But before I start building buildings, I need to understand what a house actually looks like and how it functions.</p>

<h3>Introducing: Sinatra</h3>

<p>According to the <a href="http://www.sinatrarb.com/intro.html">official website</a>, <strong>Sinatra</strong> &ldquo;is a <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> for quickly creating web applications in Ruby with minimal effort.&rdquo;  If we keep with the analogy, Sinatra is a much easier framework for building simple houses, while something like Rails is a lot more powerful and allows us to build all kinds of buildings, but at the expense of requiring a lot more complexity.</p>

<p><em>On a side note, did you know that if you search for &ldquo;Sinatra&rdquo; on Google, the first result is actually Ruby Sinatra and not Frank Sinatra? Crazy eh? Thanks <a href="https://twitter.com/StevenABrooks">@StevenABrooks</a> for the tip!</em></p>

<p>So obviously it makes sense to learn how to build a simple house before building a skyscraper, eh?  And even before I start to build houses, it might be a good idea to look at what other peoples&#8217; houses look like, eh? Luckily thanks to the open source movement, we can see exactly how sites are built and learn how to organize our tools (i.e. codebase) to best start the building process.  Thanks, yer ol&#8217; <a href="http://www.github.com">Hub o&#8217; Gits</a>!</p>

<p>I picked a Sinatra web app, and analyzed its codebase to learn how its floors are laid, how rooms are connected, etc, to better design my own floorplans in the future.  And what better app to look at than the appropriately-named &ldquo;Dashing&rdquo;?</p>

<h3>Sinatra is not Dashing, but Dashing is Sinatra?</h3>

<p><a href="http://shopify.github.io/dashing/">Dashing</a> by <a href="http://www.shopify.com">Shopify</a> definitely lives up to its name &ndash; check out demos <a href="http://dashingdemo.herokuapp.com/sample">here</a> and <a href="http://dashingdemo.herokuapp.com/sampletv">here</a>.  Dashing is &ldquo;a Sinatra based framework that lets you build beautiful dashboards&rdquo;. Its UI is similar to Window 8&rsquo;s, except without the evil-empirishness of a close-sourced monopoly; I can look behind the curtain to see a <a href="https://github.com/Shopify/dashing"> well-designed, simple codebase in the repo</a>.  Here&rsquo;s what it looks like:</p>

<ul>
<li><strong>/bin</strong> &ndash; inside is a single ruby binary for the command line inputs</li>
<li><strong>/javascripts</strong> &ndash; where all the magic of the UI happens. The .js files inside include JQuery, as well as a batman.js file, which seems to be linked to <a href="https://github.com/Shopify/batman">another Shopify product</a></li>
<li><strong>/lib</strong> &ndash; there is only single file in here, dashing.rb.  This appears to be the actual Sinatra application for interfacing with the web servers and &lsquo;net.  So even though this file is very small compared to some others, it is essential &ndash; without it this would not be a web app.</li>
<li><strong>/templates</strong> &ndash; there are a few miscellaneous templates in here.  The biggie is a folder inside called <strong>/projects</strong>.  The way Dashing works, you can generate entire projects with the Dashing gem, by typing &lsquo;dashing new sweet_dashboard_project&rsquo; into CLI, which will use this <strong>/projects</strong> folder as a template</li>
<li><strong>/test</strong> &ndash; a pretty simple set of tests in the test suite</li>
<li><strong>.gitignore</strong> &ndash; pretty standard; this tells git what kinds of files to ignore when creating or changing a repo</li>
<li><strong>Gemfile</strong> &ndash; all Ruby gems have this</li>
<li><strong>MIT-LICENSE</strong> &ndash; pretty standard</li>
<li><strong>README.md</strong> &ndash; pretty standard</li>
<li><strong>Rakefile</strong> &ndash; pretty standard. This rakefile makes it super simple for Ruby to run your test suite</li>
<li><strong>dashing.gemspec</strong> &ndash; This contains gem specifications &ndash; pretty standard for when we want package a library into a Ruby gem</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summary - Extending Ruby with Ruby]]></title>
    <link href="http://gglin.github.io/blog/2013/06/17/how-to-best-use-github/"/>
    <updated>2013-06-17T07:57:00-04:00</updated>
    <id>http://gglin.github.io/blog/2013/06/17/how-to-best-use-github</id>
    <content type="html"><![CDATA[<p>(More to come &ndash; summary of the presentation below)
<a href="https://speakerdeck.com/michaelfairley/extending-ruby-with-ruby">https://speakerdeck.com/michaelfairley/extending-ruby-with-ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I learned about programming from a delivery guy]]></title>
    <link href="http://gglin.github.io/blog/2013/06/14/what-i-learned-about-programming-from-a-delivery-guy/"/>
    <updated>2013-06-14T00:27:00-04:00</updated>
    <id>http://gglin.github.io/blog/2013/06/14/what-i-learned-about-programming-from-a-delivery-guy</id>
    <content type="html"><![CDATA[<p>So today, as I was heading up the elevator on my way to my apartment, a food delivery guy gets into the elevator.</p>

<p><em>Some context: I live on the 46th floor of my building, so it&rsquo;s always slightly annoying when people get into the elevator on the way up &ndash; that&rsquo;s 2 more floors the elevator has to stop at!  It&rsquo;s tough enough having the elevator stop at a bunch of floors on its way down; I&rsquo;d rather not have it do that on the way up (I know, first world problem)</em></p>

<p>Now, the delivery guy not only decides to hit another floor (let&rsquo;s say <code>35</code>) between the floor he got on (let&rsquo;s say it was <code>20</code>) and my floor (<code>46</code>), but he also decides to hit the button for the <code>penthouse</code> floor! This doesn&rsquo;t really annoy me as I will be getting off the elevator before then, but it does pique my interest&hellip;</p>

<p>&hellip;as soon as he gets off on the 35th floor, he immediately hits the <code>down</code> button on that floor and then hurries down the hallway to make his delivery.</p>

<p>How strange.  I think about this for a second before coming up with an explanation:</p>

<h3>Elevator Workflow</h3>

<p>This is the delivery guy&rsquo;s &ldquo;workflow&rdquo; &ndash; as soon as he gets into the elevator, he wants to make sure the elevator is going to go to the top floor.  That way, as soon as he gets off and immediately hits <code>down</code>, he is ensured that there is an elevator &ndash; the one he just got off of &ndash; which will go to the top floor and then come down to meet him as he finishes his delivery, assuming the time it takes to deliver is similar to the time it takes for the elevator to go to the top and then come down to meet him.  If he had not hit the <code>penthouse</code> button, all the elevators might already be at the bottom and he would have to wait much longer for one of them to come up and take him down.</p>

<p><em>Now I know why delivery people are always so impatient when I don&rsquo;t come to the door immediately!</em></p>

<h3>Delivery = Programming</h3>

<p>So how is this related to programming you ask? It might not be that related. But my head has been swimming in code for the last 3 weeks, so these are the kinds of analogies I&rsquo;m drawing:</p>

<ol>
<li><p>In my experience to the world of programming, it seems that efficiency is huge. Sure, maybe if you don&rsquo;t know the keyboard shortcut to a common task, you might waste a second each time, but compound this x1000s and you might be wasting hours, days, weeks, or even longer if programming is a lifelong endeavor.  In a similar way, this delivery guy&rsquo;s methodology might save him a minute or two each time, but compound that and it might become pretty substantial.</p></li>
<li><p>To an outside observer, these little &ldquo;hacks&rdquo; might seem mysterious at first (or maybe just to me), but once understood I have an &ldquo;Aha!&rdquo; moment. When thinking about or looking at code, I often find that some of the individual parts don&rsquo;t make a lot of sense on their own &ndash; e.g. &ldquo;why did the delivery guy press the top floor?? It&rsquo;s not like he&rsquo;s going there since he&rsquo;s getting off before then&rdquo;.  But once understood as part of a whole, the code is crucial or complementary.  Conversely, there is some code which makes perfect sense when I see it &ndash; e.g. &ldquo;press the <code>down</code> button as soon as you get off on a floor&rdquo; &ndash; but there&rsquo;s a lot of nuances that are easy to miss upon cursory inspection, e.g. the elevator going to the top floor complementing the more obvious action.</p></li>
<li><p>I was exposed to the method of pressing the <code>penthouse</code> floor button, before seeing the method of pressing <code>down</code> immediately after getting off the elevator.  However, pressing <code>down</code> is the first real action after getting off the elevator, and it just so happens that the ideal result occurs as a result of the <code>penthouse</code> method triggering much earlier.  Similarly, when reading code, things don&rsquo;t seem to be as straightforward as reading downwards.  Control flow, methods being invoked, etc add complexity to how code is read, and it becomes a skill to mentally conceptualize how things are flowing.</p></li>
<li><p>It would probably have been easiest to figure all this out by <em>asking</em>. If I was a delivery guy I might have figured this out on my own, but there is a chance I wouldn&rsquo;t have and wasted a lot of time.  The actual task of delivering things, just like programming, is oftentimes inherently lonely, yet there are so many ways it could/should be social &ndash; you have to interact with people in some capacity in order to get the product to the customer. And like many industries, there is so much to learn from others, whether it is through mentorship, apprenticeship, other resources, pair programming, or whatnot.</p></li>
<li><p>Software development even uses similar language as food delivery &ndash; &ldquo;shipping&rdquo;, &ldquo;delivery / deployment&rdquo;, etc.</p></li>
</ol>


<h3>Stand &amp; Deliver</h3>

<p>As I&rsquo;m learning about data modeling and object-oriented programming, what might be interesting is modeling out the actual elevator / food / &ldquo;hacker&rdquo; delivery guy in code.   More to come on a later date?</p>

<hr />

<h2>First Meetup</h2>

<p>On an unrelated note, today was the first meeting this semester of the NYC on Rails Meetup! Here&rsquo;s a snippet of a great presentation on creating a Gem which uses command line to post directly to Tumblr (<a href="http://shitavisays.tumblr.com">ShitAviSays</a>):</p>

<iframe class="vine-embed" src="http://vine.co/v/blU3gmAadgn/embed/simple" width="480" height="480" frameborder="0"></iframe>


<script async src="http://gglin.github.io//platform.vine.co/static/scripts/embed.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://gglin.github.io/blog/2013/06/05/hello-world/"/>
    <updated>2013-06-05T10:43:00-04:00</updated>
    <id>http://gglin.github.io/blog/2013/06/05/hello-world</id>
    <content type="html"><![CDATA[<pre><code>puts "Hello, world!"

document.write('Hello, world!');

#import &lt;stdio.h&gt;
int main( int argc, const char *argv[] ) {
    printf( "Hello world\n" );
    return 0;
}

public class HelloWorld {
   public static void main(String[] args) {
       System.out.println("Hello, world!");
   }
}

print("Hello, world!")

(display "Hello, world!")

main = putStrLn "Hello, world!"

cat('Hello, world!\n')
</code></pre>

<blockquote><p>&ldquo;A smooth sea never made a skilled sailor.&rdquo;</p></blockquote>

<p>Hello, my name is George, and I&rsquo;m a student <a href="http://www.flatironschool.com" title="The Flatiron School">@flatironschool</a>, a 12-week intensive program for aspiring web developers. As part of the program, <a href="http://twitter.com/aviflombaum">@avi</a> has all students regularly maintain a blog.  So after many years of maintaining a digital footprint via only facebook and twitter, here I am!</p>

<p><em>Above is a list of languages I am interested in learning, vaguely listed by interest level, though this is bound to change as I get to know more and more.</em></p>

<h3>A little about me:</h3>

<ul>
<li>BS Chemical Engineering 2008, MIT</li>
<li>Former Management Consultant</li>
<li>Places lived: China, Central PA, Central NJ, Boston, NYC</li>
<li>DOB: 1986-06-25</li>
</ul>


<p>OK that&rsquo;s enough.  Back to code.  See you next time!</p>
]]></content>
  </entry>
  
</feed>
